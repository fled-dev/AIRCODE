#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

// Bring the encryption module into scope
mod encryption;

use std::path::Path;
use std::process;

// Define the Tauri command
#[tauri::command]
fn encrypt_message(message: String, key: String, profile_path_str: String) -> Result<String, String> {
    let profile_path = Path::new(&profile_path_str);

    // Load the encryption profile
    let profile = match encryption::EncryptionProfile::load_from_json(profile_path) {
        Ok(p) => p,
        Err(e) => {
            // Return an error string that can be displayed in the frontend
            return Err(format!("Error loading profile '{}': {}", profile_path.display(), e));
        }
    };

    // Encrypt the message using the loaded profile
    match profile.encrypt(&message, &key) {
        Ok(encrypted_message) => Ok(encrypted_message),
        Err(e) => {
            // Return an error string
            Err(format!("Error encrypting message: {}", e))
        }
    }
}

fn main() {
    // Move the encryption module code into src-tauri/src/
    // The original src/encryption/* files should be moved to src-tauri/src/encryption/*
    // The original src/main.rs is no longer needed as the entry point is now src-tauri/src/main.rs

    tauri::Builder::default()
        .invoke_handler(tauri::generate_handler![encrypt_message]) // Register the command
        .run(tauri::generate_context!()) // Use the context generated by tauri-build
        .expect("error while running tauri application");
}
